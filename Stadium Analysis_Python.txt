import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import streamlit as st
import pydeck
from pydeck.types import String


#@Yifan Wang, December 16, 2021, CS230 Project


#Header Design
st.image('ncaa_banner.png',width=400)
st.markdown('<p class="font">NCAA Stadiums</p>', unsafe_allow_html=True)
st.image(
            "https://media0.giphy.com/media/l0HlUbS6ym8jm0seI/200w.webp?cid=ecf05e4738p8mgi9u3ql2115bd7zzf0cjwb31zisuz4miiz5&rid=200w.webp&ct=g",
            width=400
        )
st.markdown(""" <style> .font {
font-size:50px ; font-family: 'Cooper Black'; color: #FF9633} 
</style> """, unsafe_allow_html=True)

#State Data
def map_state_abbr(display_name):
    """
    Match US state names with abbreviations.
    ref. https://www.path2usa.com/us-map-with-states-and-their-abbreviations
    display_name:  A state name that is displayed either in full
    name or abbreviation format.
    return: Abbreviation format of state name.
    """
    state_dic = {'Alabama': 'AL', 'Alaska': 'AK', 'Arizona': 'AZ',
                 'Arkansas': 'AR', 'California': 'CA', 'Colorado': 'CO',
                 'Connecticut': 'CT', 'Delaware': 'DE', 'Florida': 'FL',
                 'Georgia': 'GA', 'Hawaii': 'HI', 'Idaho': 'ID',
                 'Illinois': 'IL', 'Indiana': 'IN', 'Iowa': 'IA',
                 'Kansas': 'KS', 'Kentucky': 'KY', 'Louisiana': 'LA',
                 'Maine': 'ME', 'Maryland': 'MD', 'Massachusetts': 'MA',
                 'Michigan': 'MI', 'Minnesota': 'MN', 'Mississippi': 'MS',
                 'Missouri': 'MO', 'Montana': 'MT', 'Nebraska': 'NE',
                 'Nevada': 'NV', 'New Hampshire': 'NH', 'New Jersey': 'NJ',
                 'New Mexico': 'NM', 'New York': 'NY', 'North Carolina': 'NC',
                 'North Dakota': 'ND', 'Ohio': 'OH', 'Oklahoma': 'OK',
                 'Oregon': 'OR', 'Pennsylvania': 'PA', 'Rhode Island': 'RI',
                 'South Carolina': 'SC', 'South Dakota': 'SD', 'Tennessee': 'TN',
                 'Texas': 'TX', 'Utah': 'UT', 'Vermont': 'VT',
                 'Virginia': 'VA',
                 # washingtonDC in multiple formats
                 'Washington D.C.': 'D.C.', 'Washington': 'WA',
                 'West Virginia': 'WV',
                 'Wisconsin': 'WI', 'Wyoming': 'WY'}
    if display_name in state_dic.keys():
        abbr = state_dic[display_name]
    elif display_name in state_dic.values():
        abbr = display_name
    else:
        abbr = 'NOT FOUND'
    return abbr

#Year into decade
def year_into_decade(year_int):
    """
    Convert year into decade of century. e.g., 1999 --> 1990s
    """
    return str(year_int)[:-1] + '0s'


def data_processing():
    # read dataset
    data = pd.read_csv('stadums.csv')
    # create column 'built_decade'
    data['built_decade'] = data['built'].apply(year_into_decade)
    # create column 'state_cleaned'
    data['state_cleaned'] = data['state'].apply(map_state_abbr)
    # drop the original 'state' column
    data = data.drop(columns=['state'], axis=1)
    # count new-built stadiums of each decade
    count_by_year = data.groupby(by=['built_decade']).agg('count')[['stadium']]
    # count number of stadiums of each state
    count_by_state = data.groupby(by='state_cleaned').agg('count')[['stadium']]\
        .reset_index(drop=False)
    #not delete the index column
    return data, count_by_year, count_by_state

# Map Visual
# API Mapbox account token:
# https://account.mapbox.com/auth/signin/?route-to=%22https://account.mapbox.com/access-tokens/%22
#Layer Ref: https://deckgl.readthedocs.io/en/latest/layer.html
#Heatmap: https://github.com/topics/heatmap
def visualize_map(data):
    st.title('Stadium Distribution Across U.S.')
    st.pydeck_chart(pydeck.Deck(
        initial_view_state=pydeck.ViewState(latitude=37.7749295,
                                            longitude=-100.4194155,
                                            zoom=2.8,
                                            bearing=0,
                                            pitch=4),
        map_style='road',
        api_keys={'mapbox':
                      'pk.eyJ1IjoibWlzYWtpeWFuYW4iLCJhIjoiY2t4NGl4N3hy'
                      'MTVzOTJvdXFyNGE2aHIxZyJ9.qSjLBPNmc-3N16j67pOlCQ'},


        layers=[pydeck.Layer("HeatmapLayer",
                             data=data.replace(np.nan, 'missing'),
                             opacity=0.9,
                             pickable=True,
                             get_position=["longitude", "latitude"],
                             aggregation=String('COUNT'))]))
    st.caption('There is a higher concentration of stadiums in Northeastern United States.')

#Sidebar
def graph_settings():
    """
    Managing Streamlit widgets for graph settings.
    return: Colors, color sidebar, transparency slider
    """
    st.sidebar.header('GRAPH SETTINGS')
    # manage colors
    colors = {"RED": "red",
              "ORANGE": 'orange',
              "YELLOW": "yellow",
              "GREEN": "green",
              "BLUE": "lightblue",
              "CYAN": "cyan",
              "PURPLE": 'purple'}
    color_names = list(colors.keys())
    color_bar = st.sidebar.radio('Select a color:', color_names)

    # manage transparency
    trans_slider = st.sidebar.slider("Slide to change transparency:", 0.2, 1.0)

    return colors, color_bar, trans_slider

#Line Chart
def visualize_linechart():
    """
    Linechart visualization.
    """
    st.title('Changes Over Decades')

    # plot line graph
    ax1 = plt.figure(figsize=(10, 4))
    plt.plot(count_by_year.index,
             count_by_year['stadium'],
             linewidth=6,
             alpha=trans_slider,
             c=colors[color_bar])
    ax1.set_facecolor('lightgray')
    plt.grid(axis='y', alpha=0.6)
    plt.xticks(rotation=45)
    plt.xlabel('year')
    plt.ylabel('Number of new-built stadiums')

    #  visualization
    #Two graphs together
    col1, col2 = st.columns([2.5, 1])
    with col1:
        st.subheader("The Trend")
        st.pyplot(ax1)
        st.caption("This line chart demonstrates changes in the number of "
                   "new-built stadiums across the US over time. "
                   "\nThe 1920s and 1960s were the two peaks of building new venues.")
    with col2:
        st.subheader("Detailed Stats")
        st.dataframe(count_by_year
                     .rename(columns={'stadium': '# of stadiums'})
                     .style.highlight_max(axis=0)) #highlight maximum value

    return

# Bar Chart
def visualize_barchart():
    """
    Barchart visualization.
    """
    st.title("Exploring Stadiums by States")

    options = st.multiselect(
        'Which states would you like to add to this barchart? ',
        ['AL', 'AR', 'AZ', 'CA', 'CO', 'CT', 'DE', 'FL', 'GA', 'HI', 'IA',
         'ID', 'IL', 'IN', 'KS', 'KY', 'LA', 'MA', 'MD', 'ME', 'MI', 'MN',
         'MO', 'MS', 'MT', 'NC', 'ND', 'NE', 'NH', 'NJ', 'NM', 'NV', 'NY',
         'OH', 'OK', 'OR', 'PA', 'RI', 'SC', 'SD', 'TN', 'TX', 'UT', 'VA',
         'WA', 'WI', 'WV', 'WY'],
        ['NY', 'WA', 'CA', 'PA'])

    #pandas filter
    filtered_states = count_by_state[count_by_state['state_cleaned']
        .isin(options)] \
        .sort_values(by='stadium', ascending=True)

    # plot barchart(horizontal)
    ax2 = plt.figure()
    plt.barh(filtered_states['state_cleaned'],
             filtered_states['stadium'],
             color=colors[color_bar],
             alpha=trans_slider)
    ax2.set_facecolor('lightgray')
    plt.grid(axis='x', alpha=0.6)
    plt.xlabel('Number of stadiums')
    plt.ylabel('State')
    st.pyplot(ax2)
    return


if __name__ == '__main__':
    data, count_by_year, count_by_state = data_processing()
    visualize_map(data)
    colors, color_bar, trans_slider = graph_settings()
    visualize_linechart()
    visualize_barchart()
